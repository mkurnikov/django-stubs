from io import StringIO
from typing import Any, Iterator, Optional, Union, IO, Type
from types import TracebackType

from django.core.files.utils import FileProxyMixin

class File(FileProxyMixin, IO[Any]):
    DEFAULT_CHUNK_SIZE: Any = ...
    file: StringIO = ...
    name: str = ...
    mode: str = ...
    def __init__(self, file: Any, name: Optional[str] = ...) -> None: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def size(self) -> int: ...
    def chunks(self, chunk_size: Optional[int] = ...) -> Iterator[Union[bytes, bytearray]]: ...
    def multiple_chunks(self, chunk_size: Optional[Any] = ...): ...
    def __iter__(self) -> Iterator[Union[bytes, str]]: ...
    def __next__(self) -> Union[bytes, str]: ...
    def __enter__(self) -> File: ...
    def __exit__(
        self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], tb: Optional[TracebackType]
    ) -> bool: ...
    def open(self, mode: Optional[str] = ...) -> File: ...
    def close(self) -> None: ...

class ContentFile(File):
    file: StringIO
    size: Any = ...
    def __init__(self, content: Union[bytes, str], name: Optional[str] = ...) -> None: ...
    def __bool__(self) -> bool: ...
    def open(self, mode: Optional[str] = ...) -> ContentFile: ...
    def close(self) -> None: ...
    def write(self, data: str) -> int: ...

def endswith_cr(line: bytes) -> bool: ...
def endswith_lf(line: Union[bytes, str]) -> bool: ...
def equals_lf(line: bytes) -> bool: ...
